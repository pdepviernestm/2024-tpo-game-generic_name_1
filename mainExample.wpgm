import example.*
import wollok.game.*

program meteoricSpace {
    game.title("nave")
    game.height(75)
    game.width(150)
    game.cellSize(25)
    game.boardGround("fondofondo5.png")

    

    var balas = []
    var meteoritos = []
    var balasDisparadas = 0
    var nivel = new Nivel()
    
    game.addVisual(reducir_velocidad)
    game.addVisual(nivel)
    game.addVisual(nave)
    game.addVisual(sumar_minicion)
    game.addVisual(poner_Escudo)

    nivel.iniciar_nave()
    // Movimiento de la nave
    keyboard.right().onPressDo({
            if(nave.position().x() < nivel.limite_derecho()) {
                nave.position(nave.position().right(5))
            }
    })

    keyboard.left().onPressDo({
            if(nave.position().x() > nivel.limite_izquierdo()) {
                nave.position(nave.position().left(5))
            }
        
    })

    keyboard.up().onPressDo({
        if(nave.position().y() < nivel.limite_arriba())
        nave.position(nave.position().up(5))
    })

    keyboard.down().onPressDo({
        if(nave.position().y() > nivel.limite_abajo())
        nave.position(nave.position().down(5))
    })

    // Disparar
    keyboard.c().onPressDo({
        if(nave.municionesDisponibles() > 0){
            var bala = nave.disparar()
            balas.add(bala)
            game.addVisual(bala)
        }
    })

    keyboard.z().onPressDo({
        nave.sumarMunicion(sumar_minicion.balas_a_agregar())
        sumar_minicion.cambiarFondo("municion_sinMunicion.png")
    })
    keyboard.x().onPressDo({
            nave.ponerEscudo()
            poner_Escudo.cambiarFondo("icono_escudo_no_disponible.png")
    })

    keyboard.v().onPressDo({
        nivel.reducirVelocidad()
        reducir_velocidad.cambiarFondo("ralentizacion_desactivada1.png")
    })

    game.onTick(100, "Movimiento Balas",{
        // Lista temporal para las balas que deben ser eliminadas
        var balasABorrar = []
        var meteoritosABorrar = []
        
        balas.forEach({ bala => 
            bala.position(bala.position().up(5))

            if (bala.position().y() > game.height()) {
                balasABorrar.add(bala)
            }
        })

        // Borrar las balas fuera de pantalla
        balasABorrar.forEach({ bala =>  
            balas.remove(bala)
            game.removeVisual(bala)
        })
    })

    // Generar meteoritos
    game.onTick(1000, "Aparece Meteorito",{
        const x = nivel.limite_izquierdo().randomUpTo(nivel.limite_derecho()).truncate(0)
        const y = 75
        if (meteoritos.size()< nivel.meteoritosRestantes()){
        const meteorito = new Meteorito(position = game.at(x, y), velocidad = nivel.velocidadMeteoritos())
        meteoritos.add(meteorito)
        game.addVisual(meteorito)}
    })
    //METEORITOS ESPECIALES
    
    game.onTick(2000, "Aparece Meteorito",{
        if(nivel.generarMeteoritoDuro()){
        const x = nivel.limite_izquierdo().randomUpTo(nivel.limite_derecho()).truncate(0)
        const y = 75
        if (meteoritos.size()<nivel.meteoritosRestantes()){
        const meteoritoDuro = new Meteorito(position = game.at(x, y),velocidad = nivel.velocidadMeteoritos(),vida=2,image = "meteorito_duro.png")
        meteoritos.add(meteoritoDuro)
        game.addVisual(meteoritoDuro)
        }}
    })
       
     game.onTick(3000, "Aparece Meteorito",{
        if(nivel.generarMeteoritoVeloz()){
        const x = nivel.limite_izquierdo().randomUpTo(nivel.limite_derecho()).truncate(0)
        const y = 75
        if (meteoritos.size()<nivel.meteoritosRestantes()){
        const meteoritoVeloz = new Meteorito(position = game.at(x, y),velocidad = nivel.velocidadMeteoritos()+2,image="meteorito_veloz.png")
        meteoritos.add(meteoritoVeloz)
        game.addVisual(meteoritoVeloz)}}
        })
        
    // Movimiento de meteoritos
    game.onTick(53, "Cae Meteorito", {
    var meteoritosABorrar = []
    meteoritos.forEach({ meteorito => 
        meteorito.mover()
        if (meteorito.position().y() < 0) {
            meteoritosABorrar.add(meteorito)
        }
    })
    meteoritosABorrar.forEach({ meteorito =>
        meteoritos.remove(meteorito)
        game.removeVisual(meteorito)
    })
})

    game.onTick(12, "Verificar Colisiones", {
    // Listas temporales para las balas y meteoritos que deben ser eliminados
    var balasABorrar = []
    var meteoritosABorrar = []
    balas.forEach({ bala => 
        meteoritos.forEach({ meteorito =>
            if (meteorito.colisionaCon(bala)) {
                balasABorrar.add(bala)
                meteorito.recibirDisparo()
                if(meteorito.vida()<=0){
                meteoritosABorrar.add(meteorito)
                nivel.eliminarMeteorito()
                if(nivel.meteoritosEliminados() == 5){
                    sumar_minicion.cambiarFondo("municion_activada.png")
                    game.addVisual(sumar_minicion)
                    
                }
                if(nivel.meteoritosEliminados() == 10){
                    poner_Escudo.cambiarFondo("icono_escudo_disponible.png")
                    game.addVisual(poner_Escudo)
                    
                }
                if(nivel.meteoritosEliminados() == 15){
                    reducir_velocidad.cambiarFondo("ralentizacion1.png")
                    game.addVisual(reducir_velocidad)
                    
                }
                }
            }
        })
    })

    // Verificar colisiones entre meteoritos y la nave
    meteoritos.forEach({ meteorito =>
        if (nave.colisionaCon(meteorito)) {
            meteoritosABorrar.add(meteorito)
            nave.perderVida()
            
        }
    })
    // Borrar las balas que colisionaron
    balasABorrar.forEach({ bala =>
        balas.remove(bala)
        game.removeVisual(bala)
    })

    // Borrar los meteoritos que colisionaron
    meteoritosABorrar.forEach({ meteorito =>
        meteoritos.remove(meteorito)
        game.removeVisual(meteorito)
    })
    
})

    game.start()
}
